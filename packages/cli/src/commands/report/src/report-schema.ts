/**
 * Report Schema - Data Structures for Performance Reporting
 *
 * This module defines the TypeScript interfaces and schemas for the structured
 * report data that will be generated by the AnalysisEngine. These structures
 * serve as the contract between the analysis logic and any future rendering system.
 *
 * Required by ticket #5787 - ReportData interface specification.
 */

import { z } from 'zod';
import { MatrixConfig } from '../../scenario/src/matrix-schema';
import { ScenarioRunResult } from '../../scenario/src/schema';

/**
 * High-level summary statistics calculated across all runs
 */
export interface ReportSummaryStats {
  /** Total number of runs analyzed */
  total_runs: number;

  /** Number of runs that failed to complete */
  total_failed_runs: number;

  /** Average execution time across all runs (in seconds) */
  average_execution_time: number;

  /** Median execution time across all runs (in seconds) */
  median_execution_time: number;

  /** Average number of LLM calls per run */
  average_llm_calls: number;

  /** Average total tokens used per run */
  average_total_tokens: number;

  /** Success rates for each capability/evaluation type */
  capability_success_rates: Record<string, number>;

  /** Overall success rate (percentage of runs that completed without error) */
  overall_success_rate: number;
}

/**
 * Information about a common trajectory pattern
 */
export interface CommonTrajectory {
  /** Sequence of trajectory step types */
  sequence: string[];

  /** Number of runs that followed this trajectory */
  count: number;

  /** Average duration for runs following this trajectory */
  average_duration: number;

  /** Percentage of total runs that followed this trajectory */
  percentage: number;
}

/**
 * Complete structured report data generated by the AnalysisEngine
 */
export interface ReportData {
  /** Report metadata and generation info */
  metadata: {
    /** When this report was generated */
    report_generated_at: string;

    /** The original matrix configuration that was analyzed */
    matrix_config: MatrixConfig;

    /** Input directory that was processed */
    input_directory: string;

    /** Number of run files that were successfully processed */
    processed_files: number;

    /** Number of files that were skipped due to errors */
    skipped_files: number;
  };

  /** High-level summary statistics across all runs */
  summary_stats: ReportSummaryStats;

  /** Statistics grouped by each matrix parameter */
  results_by_parameter: {
    [parameter_name: string]: {
      [parameter_value: string]: ReportSummaryStats;
    };
  };

  /** Most common agent trajectory patterns */
  common_trajectories: CommonTrajectory[];

  /** All original run results for detailed analysis */
  raw_results: ScenarioRunResult[];
}

/**
 * Zod schema for validating ReportData structure
 */
export const ReportSummaryStatsSchema = z.object({
  total_runs: z.number().int().min(0),
  total_failed_runs: z.number().int().min(0),
  average_execution_time: z.number().min(0),
  median_execution_time: z.number().min(0),
  average_llm_calls: z.number().min(0),
  average_total_tokens: z.number().min(0),
  capability_success_rates: z.record(z.number().min(0).max(1)),
  overall_success_rate: z.number().min(0).max(1),
});

export const CommonTrajectorySchema = z.object({
  sequence: z.array(z.string()).min(1),
  count: z.number().int().min(1),
  average_duration: z.number().min(0),
  percentage: z.number().min(0).max(1),
});

export const ReportDataSchema = z.object({
  metadata: z.object({
    report_generated_at: z.string().refine((val) => !isNaN(Date.parse(val)), {
      message: 'report_generated_at must be a valid ISO string',
    }),
    matrix_config: z.any(), // MatrixConfig schema from scenario module
    input_directory: z.string().min(1),
    processed_files: z.number().int().min(0),
    skipped_files: z.number().int().min(0),
  }),
  summary_stats: ReportSummaryStatsSchema,
  results_by_parameter: z.record(z.record(ReportSummaryStatsSchema)),
  common_trajectories: z.array(CommonTrajectorySchema),
  raw_results: z.array(z.any()), // ScenarioRunResult schema from scenario module
});
